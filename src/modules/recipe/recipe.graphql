scalar DateTime
type Query
type Mutation

type Recipe {
    id: ID!
    name: String!
    description: String!
    ingredients: [Ingredient]
    steps: [Step]
    creator: User
    createdAt: DateTime!
    updatedAt: DateTime!
    editable: Boolean!
    editors: [User]
}

type Ingredient {
    id: ID!
    name: String!
    count: Int!
    measure: String!
    recipeId: ID
    sequence: Int
}

type Step {
    id: ID!
    description: String!
    recipeId: ID
    title: String
    image: String
    sequence: Int
}

extend type Query {
    recipes: [Recipe]!
    recipe(id: ID!): Recipe
}

extend type Mutation {
    createRecipe(recipeData: RecipeInput): Recipe,
    updateRecipe(id: ID!, recipeData: RecipeInput): Recipe,
    deleteRecipe(id: ID!): Recipe
    addStep(recipeId: ID!, stepData: StepInput): Recipe
    addIngredient(recipeId: ID!, ingredientData: IngredientInput): Recipe
    deleteStep(data: RemoveStepInput): Recipe
    deleteIngredient(data: RemoveIngredientInput): Recipe
}

input RecipeInput {
    name: String
    description: String
    ingredients: [IngredientInput]
    steps: [StepInput]
}

input IngredientInput {
    name: String!
    count: Int!
    measure: String!
}

input StepInput {
    description: String!
    title: String
    image: String
}

input RemoveIngredientInput {
    recipeId: ID
    ingredientId: ID
}

input RemoveStepInput {
    recipeId: ID
    stepId: ID
}
